import sys
import os

def html_to_header(html_file, header_file):
    """Convert HTML file to C header with byte array"""
    
    # Read the HTML file
    with open(html_file, 'rb') as f:
        html_data = f.read()
    
    # Get base name for the array variable
    base_name = os.path.splitext(os.path.basename(html_file))[0]
    var_name = base_name.replace('-', '_').replace('.', '_')
    
    # Special handling for common names that might conflict
    if var_name == 'index':
        var_name = 'indexhtm'
    elif var_name == 'keys':
        var_name = 'keyshtm'
    
    # Start building the header content
    header_content = []
    header_content.append(f"// Auto-generated from {os.path.basename(html_file)}")
    header_content.append(f"// Do not edit this file directly - edit the source .htm file instead")
    header_content.append("")
    header_content.append(f"static const uint8_t {var_name}[] PROGMEM = {{")
    
    # Convert bytes to hex format
    hex_bytes = []
    for i, byte in enumerate(html_data):
        hex_bytes.append(f"0x{byte:02x}")
        
        # Add line breaks every 16 bytes for readability
        if (i + 1) % 16 == 0 and i < len(html_data) - 1:
            header_content.append("  " + ", ".join(hex_bytes) + ",")
            hex_bytes = []
    
    # Add remaining bytes
    if hex_bytes:
        header_content.append("  " + ", ".join(hex_bytes))
    
    header_content.append("};")
    header_content.append("")
    
    # Write the header file
    with open(header_file, 'w') as f:
        f.write('\n'.join(header_content))
    
    print(f"âœ“ Generated {header_file} from {html_file}")
    print(f"  Array name: {var_name}")
    print(f"  Size: {len(html_data)} bytes")

def main():
    if len(sys.argv) != 3:
        print("Usage: python html2header.py input.htm output.h")
        print("\nExample:")
        print("  python html2header.py index.htm include/webgui/index.h")
        sys.exit(1)
    
    html_file = sys.argv[1]
    header_file = sys.argv[2]
    
    if not os.path.exists(html_file):
        print(f"Error: Input file '{html_file}' not found")
        sys.exit(1)
    
    # Create output directory if needed
    output_dir = os.path.dirname(header_file)
    if output_dir and not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    html_to_header(html_file, header_file)

if __name__ == "__main__":
    main()